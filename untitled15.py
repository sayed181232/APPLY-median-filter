# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gVyCLD_PZpGmPSxI9NL8oIIOYUlOjLDp
"""

from google.colab import drive
drive.mount("/content/drive")

!ls "/content/drive/My Drive/di"

import numpy as np
import cv2
import matplotlib.pyplot as plt
from skimage import data
from skimage.filters import median
from skimage.morphology import square

def add_salt_and_pepper_noise(image, Pa, Pb):
    """
    Add salt-and-pepper noise to an image.
    Parameters:
    - image: The input image (as a NumPy array).
    - Pa: Probability of salt noise (white pixels).
    - Pb: Probability of pepper noise (black pixels).
    Returns:
    - noisy_image: The image with salt-and-pepper noise added.
    """
    noisy_image = np.copy(image)

    # Generate random values for each pixel
    rand = np.random.random(image.shape)

    # Salt noise (set pixels to 255 with probability Pa)
    noisy_image[rand < Pa] = 255

    # Pepper noise (set pixels to 0 with probability Pb)
    noisy_image[rand > (1 - Pb)] = 0

    return noisy_image

# Load an example image (replace with your image if needed)
image_path1 = '/content/drive/My Drive/di/Fig0507(a)(ckt-board-orig).jpg'  # Replace with your image path
image = cv2.imread(image_path1, cv2.IMREAD_GRAYSCALE)  # Read as grayscale  # Example: 'camera' image from skimage

# Add salt-and-pepper noise with Pa = Pb = 0.2
Pa = 0.2
Pb = 0.2
noisy_image = add_salt_and_pepper_noise(image, Pa, Pb)

# Apply median filtering to remove noise

#filtered_image = median(noisy_image, square(5))  # 3x3 square kernel

# Display the results
fig, axes = plt.subplots(1, 4, figsize=(15, 5))

# Show the original image
axes[0].imshow(image, cmap='gray')
axes[0].set_title("Original Image")
axes[0].axis('off')

# Show the noisy image
axes[1].imshow(noisy_image, cmap='gray')
axes[1].set_title("Noisy Image (Salt and Pepper)")
axes[1].axis('off')
# Show the filtered image with kernel 3*3
axes[2].imshow( median(noisy_image, square(3)) , cmap='gray')
axes[2].set_title("Median Filter_k=3*3)")
axes[2].axis('off')
# Show the filtered image with kernel 5*5
axes[3].imshow( median(noisy_image, square(5)) , cmap='gray')
axes[3].set_title("(Median Filter_k=5*5)")
axes[3].axis('off')


plt.show()